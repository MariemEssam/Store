package main

import (
	"fmt"
	"sync"
	"time"
)

//Struct representing a purchase requests includes my buyers  name, product name, quantity, and a reply channel to get a response
// PurchaseRequest defines the structure of a customer request

type PurchaseRequest struct {
	BuyerName string
	Product   string
	Quantity  int
	ReplyChan chan string
}

// Store struct represents the store
// Holds available products and their quantities
// Uses a mutex to ensure safe concurrent access "No data races"

type Store struct {
	Products map[string]int
	Mutex    sync.Mutex
	Channel  chan PurchaseRequest
}

type ProductItem struct {
	Name     string
	Quantity int
}

func NewStore(pi ...ProductItem) *Store {
	store := &Store{
		Products: make(map[string]int),
		Channel:  make(chan PurchaseRequest, 20),
	}
	for _, item := range pi {
		store.Products[item.Name] = item.Quantity
	}
	go store.storeWorker()
	return store
}

// ProcessPurchase handles a customer's purchase request
func (s *Store) ProcessPurchase(req PurchaseRequest) {
	// Lock the store for safe concurrent access
	s.Mutex.Lock()
	defer s.Mutex.Unlock()

	availableQty, exists := s.Products[req.Product] // Check if the product exists

	if !exists {
		req.ReplyChan <- fmt.Sprintf("%s Product %s not available", req.BuyerName, req.Product)
		return
	}

	if availableQty >= req.Quantity {
		s.Products[req.Product] -= req.Quantity
		req.ReplyChan <- fmt.Sprintf("%s bought %d of %s. Remaining: %d", req.BuyerName, req.Quantity, req.Product, s.Products[req.Product])
	} else if availableQty > 0 {
		req.ReplyChan <- fmt.Sprintf("%s found Not enough stock for %s. Available: %d", req.BuyerName, req.Product, availableQty)
	} else {
		req.ReplyChan <- fmt.Sprintf("%s %s is out of stock!", req.BuyerName, req.Product)
	}
}

// Buyer simulates a customer sending a purchase request
func Buyer(req PurchaseRequest, storeChan chan PurchaseRequest, wg *sync.WaitGroup) {
	defer wg.Done()

	storeChan <- req
	response := <-req.ReplyChan
	fmt.Println(response)
}

// StoreWorker continuously handles incoming purchase requests
func (s *Store) storeWorker() {
	for req := range s.Channel {
		s.ProcessPurchase(req)
		time.Sleep(500 * time.Millisecond)
	}
}

func (s *Store) Dispose() {
	close(s.Channel)
}

func main() {

	// Initialize my store with some products which are fruits and their quantity
	store := NewStore(ProductItem{"Apple", 6}, ProductItem{"Banana", 6}, ProductItem{"Orange", 3})

	// List of my buyers and their purchase requests
	buyers := []PurchaseRequest{
		{"Ali", "Apple", 2, make(chan string)},
		{"Mariem", "Apple", 4, make(chan string)},
		{"Farida", "Banana", 3, make(chan string)},
		{"Salim", "Orange", 5, make(chan string)},
		{"Yahia", "Kiwi", 1, make(chan string)},
		{"Noura", "Banana", 3, make(chan string)},
		{"Hadi", "Banana", 1, make(chan string)},
	}

	var wg sync.WaitGroup

	// Launch each buyer in a separate goroutine
	for _, buyer := range buyers {
		wg.Add(1)
		fmt.Printf("%s is buying now.\n", buyer.BuyerName)
		go Buyer(buyer, store.Channel, &wg)
		fmt.Printf("%s has finished buying.\n", buyer.BuyerName)
	}

	wg.Wait()
	store.Dispose()
}
